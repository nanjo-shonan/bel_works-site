// =================================================================
// Main JavaScript File
// =================================================================

class BelWorksSite {
    constructor() {
        // DOMが読み込まれたら初期化処理を実行
        document.addEventListener('DOMContentLoaded', () => {
            this.initThreeJS();
        });
    }

    /**
     * ヒーローセクションのThree.jsを初期化・実行
     */
    initThreeJS() {
        const container = document.getElementById('hero-canvas-container');
        if (!container) return; // コンテナがなければ何もしない

        // 1. シーンの作成
        const scene = new THREE.Scene();

        // 2. カメラの作成
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.z = 5;

        // 3. レンダラーの作成
        const renderer = new THREE.WebGLRenderer({
            antialias: true,
            alpha: true // 背景を透過させる
        });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setPixelRatio(window.devicePixelRatio);
        container.appendChild(renderer.domElement);

        // 4. ジオメトリとマテリアルの作成 (ワイヤーフレームのトーラス)
        const geometry = new THREE.TorusKnotGeometry(1.5, 0.3, 100, 16);
        const material = new THREE.MeshBasicMaterial({
            color: 0x0057FF, // ブランドカラー (bel-blue)
            wireframe: true
        });
        const torusKnot = new THREE.Mesh(geometry, material);
        scene.add(torusKnot);

        // マウス座標を格納する変数
        const mouse = new THREE.Vector2();

        // マウスムーブイベント
        window.addEventListener('mousemove', (event) => {
            // -1から1の範囲に正規化
            mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
            mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;
        });

        // 5. アニメーションループ
        const animate = () => {
            requestAnimationFrame(animate);

            // オブジェクトをゆっくり回転させる
            torusKnot.rotation.x += 0.001;
            torusKnot.rotation.y += 0.001;

            // GSAPを使ってマウスの動きに滑らかに追従
            gsap.to(torusKnot.rotation, {
                y: torusKnot.rotation.y + (mouse.x * 0.5),
                x: torusKnot.rotation.x - (mouse.y * 0.5),
                duration: 1, // 1秒かけて追従
                ease: 'power2.out'
            });

            renderer.render(scene, camera);
        };

        animate();

        // 6. ウィンドウリサイズへの対応
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });
    }
}

// サイトのメインクラスをインスタンス化
new BelWorksSite();
